

instale o python na maquina



primeiro atualizar o pip pra versão mais atualizar

    -- python.exe -m pip install --upgrade pip

     Instalar os seguintes pacotes Iniciais.

            pip install django
            pip install pillow
            Para criar o arquivo requirements.txt

            pip freeze > requirements.txt


Ambiente Virtual

        Criando ambiente virtual

            -- python -m venv meu_ambiente_virtual

        ativando ambiente virtual

        No Windows:

            -- meu_ambiente_virtual\Scripts\activate
            
        No macOS e Linux:

            -- source meu_ambiente_virtual/bin/activate

        No Microsoft Windows, pode ser necessário ativar o script Activate.ps1, definindo a política de execução para o usuário. Você pode fazer isso executando o seguinte comando do PowerShell:

            -- PS C:> Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser

        Como Desativar um Ambiente Virtual

            -- deactivate

        Como Instalar Pacotes em um Ambiente Virtual

            -- pip install nome_do_pacote

        instalando requerimentos quando existirem

            -- pip install requests

        Rodando o ambiente Virtual para começar o projeto 

            -- python -m venv meu_projeto  

        
            ## Windows
            python -m venv .venv
            source .venv/Scripts/activate # Ativar ambiente

            ## Linux 
            ## Caso não tenha virtualenv. "pip install virtualenv"
            virtualenv .venv
            source .venv/bin/activate # Ativar ambiente
        

Django

    instalando o django no Ambiente Virtual 

        -- pip install Django

    Criando o projeto com Django

        -- django-admin startproject blog_base .

    Rodando o servidor

        -- python manage.py runserver

    comando pra gerar secret ket

        -- python -c "import string as s;from secrets import SystemRandom as SR;print(''.join(SR().choices(s.ascii_letters + s.digits + s.punctuation, k=64)));"

    criando super user

        -- python manage.py createsuperuser

        -- python manage.py migrate

        -- python manage.py makemigrations

        -- python manage.py startapp blog

Intalando variaveis de ambiente

    -- pip install python-dotenv

    Criar arquivo na raiz chamado .env (sem extenção)

        dentro dele colocar e preencher as variaveis de ambiente segue abaixo um modelo

            Exemplo:

            ## Não precisa colocar "" aspas
            SECRET_KEY=django-insecure-q(ge$586x7o9n)3w+6d_^t(m!ib&9%_m8&6@=m=sy@^7qf)#*_
            DEBUG=True
            SUPER_USER=ADMIN
            EMAIL=yurythx@gmail.com

            NAME_DB=db.sqlite3
            USER_DB=root
            PASSWORD_DB=
            HOST_DB=localhost
            PORT_DB=3306

            EMAIL_HOST=smtp.office365.com
            EMAIL_HOST_USER=email@hotmail.com
            EMAIL_HOST_PASSWORD=sua_senha
            EMAIL_PORT=587 
            EMAIL_USE_TLS=True 
            DEFAULT_FROM_EMAIL=email@hotmail.com
            SERVER_EMAIL=DEFAULT_FROM_EMAIL


            Configuração no core/settings.py

            Nota que para chamar uma variavel no arquivo .env basta chamar a biblioteca os.getenv('NAME_DB') e NAME_DB é nome da variavel que está no arquivo.

            # importar a biblioteca
            import os
            import sys
            from dotenv import load_dotenv

            # Adicionar essa tag para que nosso projeto encontre o .env
            load_dotenv(os.path.join(BASE_DIR, ".env"))

            # Diz para Django onde estão nossos aplicativos
            APPS_DIR = str(os.path.join(BASE_DIR,'apps'))
            sys.path.insert(0, APPS_DIR)

            # Chamar as variaveis assim
            SECRET_KEY = os.getenv("SECRET_KEY")

            # DEBUG
            DEBUG = os.getenv('DEBUG')

            # Aplicativos do django
            DJANGO_APPS = [
                'django.contrib.admin',
                'django.contrib.auth',
                'django.contrib.contenttypes',
                'django.contrib.sessions',
                'django.contrib.messages',
                'django.contrib.staticfiles',
            ]
            THIRD_APPS = [
                ...
            ]
            PROJECT_APPS = [
                'apps.base',
                'apps.myapp',
            ]
            INSTALLED_APPS = DJANGO_APPS + THIRD_APPS + PROJECT_APPS

            # Banco de Dados.
            DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': os.path.join(BASE_DIR, os.getenv('NAME_DB')),
                        #'USER':os.getenv('USER_DB')
                        #'PASSWORD': os.getenv('PASSWORD_DB')
                        #'HOST':os.getenv('HOST_DB')
                        #'PORT':os.getenv('PORT_DB')

                }
            }

            # Se tiver configuração de email
            EMAIL_HOST = os.getenv('EMAIL_HOST')
            EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
            EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD') 
            EMAIL_PORT = os.getenv('EMAIL_PORT') 
            EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS') 
            DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')
            SERVER_EMAIL = DEFAULT_FROM_EMAIL
            GIT

                    Comandos basicos GIT


                        Setar usuário
                            git config --global user.name "Yurii Menezes"

                        Setar email
                            git config --global user.email yurythx@gmail.com

                        Criar novo repositório
                            git init

                        Verificar estado dos arquivos/diretórios
                            git status

                        Adicionar todos os arquivos/diretórios
                            git add .

                        Comitar informando mensagem
                            git commit meuarquivo.txt -m "minha mensagem de commit"

                        git push <nome do repositório> <nome da branch>
                        git push origin master
                        git push --all

Criando o projeto


            
        django-admin startproject core .

        “core” é nome do seu projeto e quando colocamos um “.” depois do nome do projeto significa que é para criar os arquivos na raiz da pasta. Assim não cria subpasta do projeto.

        Testar a aplicação

        python manage.py runserver  

        crindo apps no projeto
        -- python manage.py startapp base

APPS DE TERCEIROS

    CORS

        Instalando o cors

         -- pip install django-cors-headers 

         configuração do cors

        importando no admin o cors

         from corsheaders.defaults import default_headers

                        # Adicionar no settings.py
                        INSTALLED_APPS = [
                            ...,
                            "corsheaders",
                            ...,
                        ]
                        MIDDLEWARE = [
                            ...,
                            "corsheaders.middleware.CorsMiddleware",
                                "django.middleware.common.CommonMiddleware",
                            ...,
                        ]
                        ALLOWED_HOSTS = [ 
                                'localhost', 
                                '127.0.0.1',  
                        ]

                        CORS_ALLOW_HEADERS = list(default_headers) + [
                                'X-Register',
                        ]

                        # CORS Config
                        CORS_ORIGIN_ALLOW_ALL = True  
                        # CORS_ORIGIN_ALLOW_ALL como True, o que permite que qualquer site acesse seus recursos.
                        # Defina como False e adicione o site no CORS_ORIGIN_WHITELIST onde somente o site da lista acesse os seus recursos.

                        CORS_ALLOW_CREDENTIALS = False 

                        CORS_ORIGIN_WHITELIST = ['http://meusite.com',] # Lista. 

                                
                        if not DEBUG: verifica se a aplicação está sendo executada em modo de depuração (DEBUG=True). Se DEBUG for False, isso significa que a aplicação está sendo executada em um ambiente de produção, portanto, as configurações de segurança devem ser aplicadas.

                        SECURE_SSL_REDIRECT direciona todas as solicitações HTTP para HTTPS.

                        ADMINS é uma lista de tuplas que contêm informações sobre os administradores do site. Se ocorrer um erro no site, um email será enviado para os endereços listados em ADMINS.

                        SESSION_COOKIE_SECURE garante que os cookies de sessão sejam definidos apenas em conexões HTTPS.

                        CSRF_COOKIE_SECURE garante que os cookies CSRF sejam definidos apenas em conexões HTTPS.

                        Essas configurações ajudam a proteger a aplicação contra ataques de interceptação e garantem que as informações confidenciais do usuário sejam mantidas seguras.

                        Com essas configurações, você permitirá que o site "http://meusite.com" acesse seus recursos. É importante lembrar que, para que isso funcione, o site que está acessando seus recursos também deve ter a configuração CORS correta.                                                              

    Logs

        instalando django-requestlogs

        -- pip install django-requestlogs        


        Adicionar no core/settings.py

        MIDDLEWARE = [
            ...
            'requestlogs.middleware.RequestLogsMiddleware',
        ]
        REST_FRAMEWORK={
            ...
            'EXCEPTION_HANDLER': 'requestlogs.views.exception_handler',
        }
        Documentação: https://docs.djangoproject.com/en/4.1/topics/logging/#topic-logging-parts-loggers

        # Logs
        LOGGING = {
            'version': 1,
            'disable_existing_loggers': False,
            'handlers': {
                'requestlogs_to_file': {
                    'level': 'INFO',
                    'class': 'logging.FileHandler',
                    'filename': 'info.log',
                },
            },
            'loggers': {
                'requestlogs': {
                    'handlers': ['requestlogs_to_file'],
                    'level': 'INFO',
                    'propagate': False,
                },
            },
        }

        REQUESTLOGS = {
            'SECRETS': ['password', 'token'],
            'METHODS': ('PUT', 'PATCH', 'POST', 'DELETE'),
        }
        No primeiro bloco de código, LOGGING, estão sendo definidos os parâmetros do logger de informações para as requisições, que será gravado em um arquivo chamado info.log.

        No segundo bloco, REQUESTLOGS, estão sendo definidas as opções de gravação de logs para as requisições, como as informações que devem ser ocultadas e quais métodos HTTP devem ser registrados. exemplo senhas, token de cliente/sistema.

        Quando precisamos gerar log em alguma rota, script qualquer função em expecifico podemos chamar essa biblioteca logger e receber as informações no arquivo de .log que configuramos.

        Por exemplo. Na view podemos fazer um tratamento assim, cria uma Exception para tratar os erros e enviar para nosso arquivo de log.

        import logging

        error_logger = logging.getLogger()

        def sendmail(data):
            ...

        ...
            try:
                data = response.data
                sendmail(data)
            except Exception as e: 
                error_logger.error(str(e) + "|" + str(data))
        ...
        Outro detalhe, em produção o arquivo info.log quando voce criar ele no linux precisa ter permissões.

        sudo chmod -R 777 path/info.log

    django-session-timeout
   
        -- pip install django-session-timeout  

                    MIDDLEWARE_CLASSES = [
                # ...
                'django.contrib.sessions.middleware.SessionMiddleware',
                'django_session_timeout.middleware.SessionTimeoutMiddleware',
                # ...
            ]
            # timeout tempo de inatividate no sistema
            SESSION_EXPIRE_SECONDS = 1800 
            SESSION_EXPIRE_AFTER_LAST_ACTIVITY = True
            #SESSION_EXPIRE_AFTER_LAST_ACTIVITY_GRACE_PERIOD = 60  
            SESSION_TIMEOUT_REDIRECT = 'http://localhost:8000/'
            SESSION_EXPIRE_SECONDS tempo em segundos até que a sessão expire por inatividade;

            SESSION_EXPIRE_AFTER_LAST_ACTIVITY indica se a sessão deve expirar após o último acesso do usuário (ou seja, se a sessão deve ser renovada a cada requisição)

            SESSION_TIMEOUT_REDIRECT URL para redirecionar o usuário quando a sessão expirar. Nesse caso, estamos redirecionando para http://localhost:8000/

            **SESSION_EXPIRE_AFTER_LAST_ACTIVITY_GRACE_PERIOD** especifica um período de carência (em segundos) para o tempo limite de expiração da sessão, ou seja, se um usuário fizer uma ação antes do período de carência expirar, o tempo limite será renovado e a sessão não será expirada.

            LOGIN_URL = 'login'
            LOGIN_REDIRECT_URL = '/'
            LOGOUT_REDIRECT_URL = '/'
            Vamos criar a view para exibir mensagem para usuario que foi desconectado por inatividade.

            def timeout_view(request):
                return render(request, 'timeout.html')
            path('timeout/',  views.timeout_view, name='timeout'),
            apps/contas/templates/timeout.html

            {% extends "base.html" %}
            {% block content %} 
            <div class="container">
                <div class="row align-items-center justify-content-center">
                    <div class="col-md-4">
                        <h3>Você foi desconectado do sistema por inatividade</h3>
                    </div>
                </div>
            </div>
            {% endblock %}
            e no settings atualizar a rota de redirecionamento.

            SESSION_TIMEOUT_REDIRECT = 'http://localhost:8000/contas/desconectado-inatividade/'     


          